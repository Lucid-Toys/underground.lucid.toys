{"version":3,"file":"static/webpack/static/development/pages/index.js.7e09dc133e6ecf54c8d0.hot-update.js","sources":["webpack:///./components/Timeline.js"],"sourcesContent":["import styled from \"@emotion/styled\"\n\nconst List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  flex: 0 0 12rem;\n  font-size: 0.75em;\n  font-variant-numeric: tabular-nums;\n  justify-content: stretch;\n  list-style-type: none;\n  padding: 1rem;\n\n  li {\n    align-items: center;\n    display: flex;\n    flex: 1;\n  }\n`\n\nconst ClockListItem = styled.li`\n  align-items: flex-start;\n  background-color: var(--background);\n  border-top: 1px solid;\n  box-shadow: 0.25em 2px 4px var(--background);\n  color: ${props => (props.busy ? \"var(--danger)\" : \"var(--foreground)\")};\n  display: flex;\n  margin: -0.5em;\n  margin-left: -1.25em;\n  max-width: 100%;\n  padding: 0.5em;\n  padding-left: 1.25em;\n  position: absolute;\n  top: ${props => props.progress}%;\n  transform: translateY(50%);\n  transition: 0.3s ease;\n  z-index: 1;\n\n  p + p {\n    margin-left: 0.75em;\n  }\n\n  ::after {\n    content: \"â€¢\";\n    position: absolute;\n    top: 0;\n    right: 0;\n    font-size: 1.25rem;\n    margin-top: -0.725em;\n    margin-right: -0.25em;\n  }\n`\n\nfunction Clock(props) {\n  const timer = useNewTimer(new Date())\n  const interval = 1000 * 60 * 60 * 24\n  const startOfDay = Math.floor(Date.now() / interval) * interval\n  const elapsed = Math.abs(timer - startOfDay) / interval\n  const hours = timer.getHours()\n  let isBusy = false\n\n  if ((hours >= 8 && hours < 11) || (hours >= 4 && hours < 7)) {\n    isBusy = true\n  }\n\n  return (\n    <ClockListItem busy={true} progress={elapsed * 100}>\n      <p>{timer.toLocaleTimeString(undefined, { timeStyle: \"short\" })}</p>\n      <p>{isBusy ? \"Usually very busy\" : \"Usually not very busy\"}</p>\n    </ClockListItem>\n  )\n}\n\nfunction useNewTimer(currentDate) {\n  const [date, setDate] = React.useState(currentDate)\n\n  React.useEffect(() => {\n    var timerID = setInterval(() => tick(), 1000)\n    return function cleanup() {\n      clearInterval(timerID)\n    }\n  })\n\n  function tick() {\n    setDate(new Date())\n  }\n\n  return date\n}\n\nexport default function Timeline() {\n  const timestamps = Array(24)\n    .fill(undefined)\n    .map((_, i) => `${i}`.padStart(2, \"0\"))\n\n  const currentTime = Date.now\n\n  return (\n    <List>\n      <Clock />\n      {timestamps.map(timestamp => (\n        <React.Fragment>\n          <li>{timestamp}:00</li>\n        </React.Fragment>\n      ))}\n    </List>\n  )\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AAiBA;AAKA;AAAA;AAQA;AAAA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAOA;;;;A","sourceRoot":""}